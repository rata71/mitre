package com.mitre.attack.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import com.mitre.attack.data.dto.Definition;
import com.mitre.attack.data.dto.Objects;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;

class ItemTest {

  @Test
  void testConstructor() {
    Definition definition = new Definition();
    definition.setStatement("MD");

    Objects objects = new Objects();
    ArrayList<String> aliases = new ArrayList<>();
    objects.setAliases(aliases);
    objects.setCreated("Jan 1, 2020 8:00am GMT+0100");
    objects.setCreatedByRef("Jan 1, 2020 8:00am GMT+0100");
    objects.setDefinition(definition);
    objects.setDefinitionType("Definition Type");
    objects.setDescription("The characteristics of someone or something");
    objects.setExternalReferences(new ArrayList<>());
    objects.setFirstSeen("First Seen");
    objects.setId("42");
    objects.setIdentityClass("Identity Class");
    objects.setKillChainPhases(new ArrayList<>());
    objects.setLabels(new ArrayList<>());
    objects.setLastSeen("Last Seen");
    objects.setModified("Jan 1, 2020 9:00am GMT+0100");
    objects.setName("Name");
    objects.setObjectMarkingRefs(new ArrayList<>());
    objects.setRelationshipType("Relationship Type");
    objects.setRevoked(true);
    objects.setSourceRef("Source Ref");
    objects.setTacticsRefs(new ArrayList<>());
    objects.setTargetRef("Target Ref");
    objects.setType("Type");
    objects.setXMitreAliases(new ArrayList<>());
    objects.setXMitreAttackSpecVersion("1.0.2");
    objects.setXMitreCollectionLayers(new ArrayList<>());
    objects.setXMitreContributors(new ArrayList<>());
    objects.setXMitreDataSourceRef("X Mitre Data Source Ref");
    objects.setXMitreDataSources(new ArrayList<>());
    objects.setXMitreDefenseBypassed(new ArrayList<>());
    objects.setXMitreDeprecated(true);
    objects.setXMitreDetection("X Mitre Detection");
    objects.setXMitreDomains(new ArrayList<>());
    objects.setXMitreEffectivePermissions(new ArrayList<>());
    objects.setXMitreFirstSeenCitation("X Mitre First Seen Citation");
    objects.setXMitreImpactType(new ArrayList<>());
    objects.setXMitreIsSubtechnique(true);
    objects.setXMitreLastSeenCitation("X Mitre Last Seen Citation");
    objects.setXMitreModifiedByRef("Jan 1, 2020 9:00am GMT+0100");
    objects.setXMitrePermissionsRequired(new ArrayList<>());
    objects.setXMitrePlatforms(new ArrayList<>());
    objects.setXMitreRemoteSupport(true);
    objects.setXMitreShortname("X Mitre Shortname");
    objects.setXMitreSystemRequirements(new ArrayList<>());
    objects.setXMitreVersion("1.0.2");
    objects.setXMmitreNetworkRequirements(true);
    Item actualItem = new Item(objects);
    assertEquals(aliases, actualItem.getAliases());
    assertTrue(actualItem.getXMmitreNetworkRequirements());
    assertEquals("1.0.2", actualItem.getXMitreVersion());
    assertEquals(aliases, actualItem.getXMitreSystemRequirements());
    assertEquals("X Mitre Shortname", actualItem.getXMitreShortname());
    assertTrue(actualItem.getXMitreRemoteSupport());
    assertEquals(aliases, actualItem.getXMitrePlatforms());
    assertEquals(aliases, actualItem.getXMitrePermissionsRequired());
    assertEquals("Jan 1, 2020 9:00am GMT+0100", actualItem.getXMitreModifiedByRef());
    assertEquals("X Mitre Last Seen Citation", actualItem.getXMitreLastSeenCitation());
    assertTrue(actualItem.getXMitreIsSubtechnique());
    assertEquals(aliases, actualItem.getXMitreImpactType());
    assertEquals("X Mitre First Seen Citation", actualItem.getXMitreFirstSeenCitation());
    assertEquals(aliases, actualItem.getXMitreEffectivePermissions());
    assertEquals(aliases, actualItem.getXMitreDomains());
    assertEquals("X Mitre Detection", actualItem.getXMitreDetection());
    assertTrue(actualItem.getXMitreDeprecated());
    assertEquals(aliases, actualItem.getXMitreDefenseBypassed());
    assertEquals(aliases, actualItem.getXMitreDataSources());
    assertEquals("X Mitre Data Source Ref", actualItem.getXMitreDataSourceRef());
    assertEquals(aliases, actualItem.getXMitreContributors());
    assertEquals(aliases, actualItem.getXMitreCollectionLayers());
    assertEquals(aliases, actualItem.getXMitreAliases());
    assertEquals("Type", actualItem.getType());
    assertEquals("Target Ref", actualItem.getTargetRef());
    assertEquals(aliases, actualItem.getTacticRefs());
    assertEquals("Source Ref", actualItem.getSourceRef());
    assertEquals("Relationship Type", actualItem.getRelationshipType());
    assertEquals(aliases, actualItem.getObjectMarkingRefs());
    assertEquals("42", actualItem.getObjectId());
    assertEquals("Name", actualItem.getName());
    assertEquals("Jan 1, 2020 9:00am GMT+0100", actualItem.getModified());
    assertEquals("Last Seen", actualItem.getLastSeen());
    assertEquals(aliases, actualItem.getLabels());
    assertEquals(aliases, actualItem.getKillChainPhases());
    assertEquals("Identity Class", actualItem.getIdentityClass());
    assertEquals("First Seen", actualItem.getFirstSeen());
    assertEquals(aliases, actualItem.getExternalReferences());
    assertEquals("The characteristics of someone or something", actualItem.getDescription());
    assertEquals("Definition Type", actualItem.getDefinitionType());
    assertEquals("Jan 1, 2020 8:00am GMT+0100", actualItem.getCreatedByRef());
    assertEquals("Jan 1, 2020 8:00am GMT+0100", actualItem.getCreated());
  }

  @Test
  void testConstructor2() {
    Definition definition = new Definition();
    definition.setStatement("MD");

    Objects objects = new Objects();
    objects.setCreated("Jan 1, 2020 8:00am GMT+0100");
    objects.setCreatedByRef("Jan 1, 2020 8:00am GMT+0100");
    objects.setDefinition(definition);
    objects.setDefinitionType("Definition Type");
    objects.setDescription("The characteristics of someone or something");
    objects.setFirstSeen("First Seen");
    objects.setId("42");
    objects.setIdentityClass("Identity Class");
    objects.setLastSeen("Last Seen");
    objects.setModified("Jan 1, 2020 9:00am GMT+0100");
    objects.setName("Name");
    objects.setRelationshipType("Relationship Type");
    objects.setRevoked(true);
    objects.setSourceRef("Source Ref");
    objects.setTargetRef("Target Ref");
    objects.setType("Type");
    objects.setXMitreAttackSpecVersion("1.0.2");
    objects.setXMitreDataSourceRef("X Mitre Data Source Ref");
    objects.setXMitreDeprecated(true);
    objects.setXMitreDetection("X Mitre Detection");
    objects.setXMitreFirstSeenCitation("X Mitre First Seen Citation");
    objects.setXMitreIsSubtechnique(true);
    objects.setXMitreLastSeenCitation("X Mitre Last Seen Citation");
    objects.setXMitreModifiedByRef("Jan 1, 2020 9:00am GMT+0100");
    objects.setXMitreRemoteSupport(true);
    objects.setXMitreShortname("X Mitre Shortname");
    objects.setXMitreVersion("1.0.2");
    objects.setXMmitreNetworkRequirements(true);
    objects.setXMitreDomains(null);
    objects.setExternalReferences(null);
    objects.setKillChainPhases(null);
    objects.setAliases(null);
    objects.setXMitreEffectivePermissions(null);
    objects.setXMitreImpactType(null);
    objects.setXMitreCollectionLayers(null);
    objects.setLabels(null);
    objects.setXMitrePlatforms(null);
    objects.setXMitreDataSources(null);
    objects.setXMitreContributors(null);
    objects.setTacticsRefs(null);
    objects.setXMitreSystemRequirements(null);
    objects.setXMitrePermissionsRequired(null);
    objects.setObjectMarkingRefs(null);
    objects.setXMitreDefenseBypassed(null);
    objects.setXMitreAliases(null);
    Item actualItem = new Item(objects);
    List<ItemObject> aliases = actualItem.getAliases();
    assertTrue(aliases.isEmpty());
    assertTrue(actualItem.getXMmitreNetworkRequirements());
    assertEquals("1.0.2", actualItem.getXMitreVersion());
    assertEquals(aliases, actualItem.getXMitreSystemRequirements());
    assertEquals("X Mitre Shortname", actualItem.getXMitreShortname());
    assertTrue(actualItem.getXMitreRemoteSupport());
    assertEquals(aliases, actualItem.getXMitrePlatforms());
    assertEquals(aliases, actualItem.getXMitrePermissionsRequired());
    assertEquals("Jan 1, 2020 9:00am GMT+0100", actualItem.getXMitreModifiedByRef());
    assertEquals("X Mitre Last Seen Citation", actualItem.getXMitreLastSeenCitation());
    assertTrue(actualItem.getXMitreIsSubtechnique());
    assertEquals(aliases, actualItem.getXMitreImpactType());
    assertEquals("X Mitre First Seen Citation", actualItem.getXMitreFirstSeenCitation());
    assertEquals(aliases, actualItem.getXMitreEffectivePermissions());
    assertEquals(aliases, actualItem.getXMitreDomains());
    assertEquals("X Mitre Detection", actualItem.getXMitreDetection());
    assertTrue(actualItem.getXMitreDeprecated());
    assertEquals(aliases, actualItem.getXMitreDefenseBypassed());
    assertEquals(aliases, actualItem.getXMitreDataSources());
    assertEquals("X Mitre Data Source Ref", actualItem.getXMitreDataSourceRef());
    assertEquals(aliases, actualItem.getXMitreContributors());
    assertEquals(aliases, actualItem.getXMitreCollectionLayers());
    assertEquals(aliases, actualItem.getXMitreAliases());
    assertEquals("Type", actualItem.getType());
    assertEquals("Target Ref", actualItem.getTargetRef());
    assertEquals(aliases, actualItem.getTacticRefs());
    assertEquals("Source Ref", actualItem.getSourceRef());
    assertEquals("Relationship Type", actualItem.getRelationshipType());
    assertEquals(aliases, actualItem.getObjectMarkingRefs());
    assertEquals("42", actualItem.getObjectId());
    assertEquals("Name", actualItem.getName());
    assertEquals("Jan 1, 2020 9:00am GMT+0100", actualItem.getModified());
    assertEquals("Last Seen", actualItem.getLastSeen());
    assertEquals(aliases, actualItem.getLabels());
    assertEquals(aliases, actualItem.getKillChainPhases());
    assertEquals("Identity Class", actualItem.getIdentityClass());
    assertEquals("First Seen", actualItem.getFirstSeen());
    assertEquals(aliases, actualItem.getExternalReferences());
    assertEquals("The characteristics of someone or something", actualItem.getDescription());
    assertEquals("Definition Type", actualItem.getDefinitionType());
    assertEquals("Jan 1, 2020 8:00am GMT+0100", actualItem.getCreatedByRef());
    assertEquals("Jan 1, 2020 8:00am GMT+0100", actualItem.getCreated());
  }
}